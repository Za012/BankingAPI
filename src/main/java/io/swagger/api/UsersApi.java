/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.InlineResponse200;
import io.swagger.model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-05-19T16:39:42.654Z[GMT]")
@Api(value = "Users", description = "the Users API")
public interface UsersApi {

    @ApiOperation(value = "Deletes a user, can only be performed by an employee", nickname = "deleteUser", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "User deleted"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/Users",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@NotNull @ApiParam(value = "The ID of the Account", required = true) @Valid @RequestParam(value = "id", required = true) Long id);


    @ApiOperation(value = "Get one User", nickname = "getUser", notes = "Calling this allows you to fetch an specific account data", response = Object.class, authorizations = {
            @Authorization(value = "bearerAuth")    }, tags={ "User", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "the user object", response = Object.class),
            @ApiResponse(code = 400, message = "bad input parameter"),
            @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/Users/{id}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<User> getUser(@ApiParam(value = "the user id",required=true) @PathVariable("id") Long id);

    @ApiOperation(value = "Retreives user data", nickname = "getUser", notes = "", response = User.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "user is authenticated and data is returned.", response = User.class),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/Users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> getUsers(@ApiParam(value = "Acending Alphabetic order is true") @Valid @RequestParam(value = "sorted", required = false) Boolean sorted,@ApiParam(value = "Date from") @Valid @RequestParam(value = "dateFrom", required = false) String dateFrom,@ApiParam(value = "Date to") @Valid @RequestParam(value = "dateTo", required = false) String dateTo,@ApiParam(value = "Maximum number of entries returned") @Valid @RequestParam(value = "entries", required = false) Integer entries);


    @ApiOperation(value = "Registers user to the system", nickname = "registerUser", notes = "Registers user", response = InlineResponse200.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful registration", response = InlineResponse200.class),
        @ApiResponse(code = 401, message = "Invalid registration"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/Users",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse200> registerUser(@ApiParam(value = "User object"  )  @Valid @RequestBody User body);


    @ApiOperation(value = "Change password", nickname = "resetUserPassword", notes = "Change password of the user, an reset password procedure will be started, link in the user accounts email.", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 404, message = "User does not exist") })
    @RequestMapping(value = "/Users",
        method = RequestMethod.PUT)
    ResponseEntity<Void> resetUserPassword(@ApiParam(value = "",required=true) @PathVariable("username") String username,@ApiParam(value = "",required=true) @PathVariable("birthday") String birthday,@ApiParam(value = "",required=true) @PathVariable("IBAN") String IBAN);


    @ApiOperation(value = "Logs user into the system", nickname = "usersLoginPost", notes = "Authorizes user creditentals", tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "successful login - Session started with a token that is shared with the user browser"),
        @ApiResponse(code = 401, message = "Invalid username/password supplied") })
    @RequestMapping(value = "/Users/Login",
        method = RequestMethod.POST)
    ResponseEntity<Void> usersLoginPost(@NotNull @ApiParam(value = "The user name for login", required = true) @Valid @RequestParam(value = "username", required = true) String username,@NotNull @ApiParam(value = "The password for login in clear text", required = true) @Valid @RequestParam(value = "password", required = true) String password);

}
